#!/usr/bin/env python
import argparse
import os
import re
import statistics
from string import ascii_letters
import subprocess
import sys

import perf


def argname(n):
    if not n:
        return ascii_letters[0]

    out = ''
    while n:
        n, ix = divmod(n, len(ascii_letters))
        out += ascii_letters[ix]
    return out


def test_type_creation_string(fields):
    'type creation from string with %d field(s)'
    for n in range(1, fields + 1):
        yield (
            '',
            "namedtuple('NT', '%s')" % ' '.join(
                map(argname, range(n)),
            ),
            n,
        )


def test_type_creation_sequence(fields):
    'type creation from sequence with %d field(s)'
    for n in range(1, fields + 1):
        yield (
            '',
            "namedtuple('NT', [%s])" % ', '.join(
                map(lambda a: repr(argname(a)), range(n)),
            ),
            n,
        )


def test_instance_creation_positional(fields):
    'type instance creation with positional arguments and %d field(s)'
    for n in range(1, fields + 1):
        yield (
            "NT = namedtuple('NT', [%s])" % ', '.join(
                map(lambda a: repr(argname(a)), range(n)),
            ),
            'NT(%s)' % ', '.join(map(str, range(n))),
            n,
        )


def test_instance_creation_keyword(fields):
    'type instance creation with keyword arguments and %d field(s)'
    for n in range(1, fields + 1):
        argnames = list(map(argname, range(n)))
        yield (
            "NT = namedtuple('NT', [%s])" % ', '.join(map(repr, argnames)),
            'NT(%s)' % ', '.join(
                '%s=%r' % (a, n) for n, a in enumerate(argnames)
            ),
            n,
        )


def test_field_access(fields):
    'field access'
    yield (
        "NT = namedtuple('NT', 'a b c');instance = NT(0, 1, 2)",
        'instance.b',
    )


def run_test(test, fields):
    for setup, command, *args in test(fields):
        print(': '.join((test.__doc__ % tuple(args), command)))
        print('  collections: ', end='', flush=True)
        collections = timeit(
            command,
            setup='from collections import namedtuple;%s' % setup,
        )
        print(collections.format())
        print('  cnamedtuple: ', end='', flush=True)
        cnamedtuple = timeit(
            command,
            setup='from cnamedtuple import namedtuple;%s' % setup,
        )
        print(cnamedtuple.format())
        ratio = collections.median() / cnamedtuple.median()
        print('  ratio:       %.2f\n' % ratio)
        yield ratio


def timeit(command, *, setup=''):
    read, write = os.pipe()
    subprocess.run(
        [
            sys.executable,
            '-m', 'perf',
            'timeit',
            '-s', setup,
            '--pipe', str(write),
            command,
        ],
        pass_fds=[write],
    )
    os.close(write)
    with open(read) as f:
        data = f.read()

    return perf.Benchmark.loads(data)


def main():
    parser = argparse.ArgumentParser('cnamedtuple benchmark suite')
    parser.add_argument(
        '-k',
        default='',
        help='Run tests matching this regex.',
    )
    parser.add_argument(
        '-n',
        type=int,
        default=8,
        help='Run tests up to ``n`` fields.'
    )

    args = parser.parse_args()
    pattern = re.compile(args.k)

    print('Running with: Python %s\n' % sys.version.replace('\n', ''))
    ratio = []
    ns = globals().copy()
    for k, v in ns.items():
        if k.startswith('test_') and pattern.match(k):
            ratio.extend(run_test(v, args.n))

    if ratio:
        print('\nmedian ratio: %.2f' % statistics.median(ratio))
    else:
        print('no tests selected')


if __name__ == '__main__':
    main()
